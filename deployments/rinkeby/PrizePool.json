{
  "address": "0x319Ad4222c47e6968c9285DE45C4826efb2BBAb9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_drawId",
          "type": "uint32"
        },
        {
          "internalType": "string",
          "name": "_betCoin",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_beaconPeriodStart",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_drawPeriodSeconds",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "drawId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        }
      ],
      "name": "ClaimedDraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract ITicket",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "drawId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "result",
          "type": "uint8"
        }
      ],
      "name": "ResultSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TIERS_LENGTH",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_bet",
          "type": "bool"
        }
      ],
      "name": "depositTo",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "drawPeriodEndAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "drawRemainingSeconds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_bet",
          "type": "bool"
        }
      ],
      "name": "getAccountedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBetCoin",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDrawId",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getResults",
      "outputs": [
        {
          "internalType": "uint8[]",
          "name": "",
          "type": "uint8[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_bet",
          "type": "bool"
        }
      ],
      "name": "getTicket",
      "outputs": [
        {
          "internalType": "contract ITicket",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isDrawOver",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_result",
          "type": "uint8"
        }
      ],
      "name": "pushResult",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ITicket",
          "name": "_yesTicket",
          "type": "address"
        },
        {
          "internalType": "contract ITicket",
          "name": "_noTicket",
          "type": "address"
        }
      ],
      "name": "setTicket",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf16e6d9df78eb2b569ce57e41a895ed04e6f57b26820801b97f7708fb2340aa7",
  "receipt": {
    "to": null,
    "from": "0x5DC27a3BB1501eA928137b10558DC8B42feA04f1",
    "contractAddress": "0x319Ad4222c47e6968c9285DE45C4826efb2BBAb9",
    "transactionIndex": 6,
    "gasUsed": "2620536",
    "logsBloom": "0x
    "blockHash": "0x711fa188a6d2ac261521a3a5d834b44901166036cff1cf7da3629b93654ddf1c",
    "transactionHash": "0xf16e6d9df78eb2b569ce57e41a895ed04e6f57b26820801b97f7708fb2340aa7",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 10833475,
        "transactionHash": "0xf16e6d9df78eb2b569ce57e41a895ed04e6f57b26820801b97f7708fb2340aa7",
        "address": "0x319Ad4222c47e6968c9285DE45C4826efb2BBAb9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005dc27a3bb1501ea928137b10558dc8b42fea04f1"
        ],
        "data": "0x",
        "logIndex": 10,
        "blockHash": "0x711fa188a6d2ac261521a3a5d834b44901166036cff1cf7da3629b93654ddf1c"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 10833475,
        "transactionHash": "0xf16e6d9df78eb2b569ce57e41a895ed04e6f57b26820801b97f7708fb2340aa7",
        "address": "0x319Ad4222c47e6968c9285DE45C4826efb2BBAb9",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08",
          "0x000000000000000000000000c40a27ea8facfbf2be191734a0e9fe90011d1c6e",
          "0x0000000000000000000000005dc27a3bb1501ea928137b10558dc8b42fea04f1"
        ],
        "data": "0x",
        "logIndex": 11,
        "blockHash": "0x711fa188a6d2ac261521a3a5d834b44901166036cff1cf7da3629b93654ddf1c"
      }
    ],
    "blockNumber": 10833475,
    "cumulativeGasUsed": "3395050",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xC40A27eA8FacfBF2be191734a0E9Fe90011D1C6e",
    1,
    "fantom",
    1654905600,
    1123200
  ],
  "numDeployments": 1,
  "solcInputHash": "3eec48c3aef0f1739326207c00df0688",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_drawId\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"_betCoin\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_beaconPeriodStart\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_drawPeriodSeconds\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"drawId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"name\":\"ClaimedDraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract ITicket\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"drawId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"result\",\"type\":\"uint8\"}],\"name\":\"ResultSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIERS_LENGTH\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_bet\",\"type\":\"bool\"}],\"name\":\"depositTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drawPeriodEndAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drawRemainingSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_bet\",\"type\":\"bool\"}],\"name\":\"getAccountedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBetCoin\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDrawId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getResults\",\"outputs\":[{\"internalType\":\"uint8[]\",\"name\":\"\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_bet\",\"type\":\"bool\"}],\"name\":\"getTicket\",\"outputs\":[{\"internalType\":\"contract ITicket\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDrawOver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_result\",\"type\":\"uint8\"}],\"name\":\"pushResult\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITicket\",\"name\":\"_yesTicket\",\"type\":\"address\"},{\"internalType\":\"contract ITicket\",\"name\":\"_noTicket\",\"type\":\"address\"}],\"name\":\"setTicket\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"The Unit\",\"kind\":\"dev\",\"methods\":{\"balance()\":{\"returns\":{\"_0\":\"The underlying balance of assets\"}},\"constructor\":{\"params\":{\"_beaconPeriodStart\":\"The time this round starts.\",\"_betCoin\":\"The coin to bet in this round\",\"_drawId\":\"The id of this round.\",\"_drawPeriodSeconds\":\"The duration of this round.\",\"_manager\":\"Address of the Prize Pool manager, who will set result everyday.\"}},\"depositTo(bool)\":{\"params\":{\"bet\":\"The choice that user makes\"}},\"drawPeriodEndAt()\":{\"returns\":{\"_0\":\"The timestamp at which the beacon period ends.\"}},\"drawRemainingSeconds()\":{\"returns\":{\"_0\":\"The number of seconds remaining until the prize can be awarded.\"}},\"getAccountedBalance(bool)\":{\"returns\":{\"_0\":\"uint256 accountBalance\"}},\"getBetCoin()\":{\"returns\":{\"_0\":\"The bet coin.\"}},\"getDrawId()\":{\"returns\":{\"_0\":\"The draw id.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isDrawOver()\":{\"returns\":{\"_0\":\"True if the beacon period is over, false otherwise\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"setTicket(address,address)\":{\"params\":{\"noTicket\":\"Address of the no ticket to set.\",\"yesTicket\":\"Address of the yes ticket to set.\"},\"returns\":{\"_0\":\"True if ticket has been successfully set.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"drawId\":{\"details\":\"Starts at 1. This way we know that no Draw has been recorded at 0.\"}},\"title\":\"The Unit PrizePool\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"VERSION()\":{\"notice\":\"Semver Version\"},\"constructor\":{\"notice\":\"Deploy the Prize Pool\"},\"depositTo(bool)\":{\"notice\":\"Deposit assets into the Prize Pool in exchange for tokens\"},\"drawPeriodEndAt()\":{\"notice\":\"Returns the timestamp at which the beacon period ends\"},\"drawRemainingSeconds()\":{\"notice\":\"Returns the number of seconds remaining until the prize can be awarded.\"},\"getAccountedBalance(bool)\":{\"notice\":\"Read internal Ticket accounted balance.\"},\"getTicket(bool)\":{\"notice\":\"Read ticket variable\"},\"isDrawOver()\":{\"notice\":\"Returns whether the beacon period is over\"},\"setTicket(address,address)\":{\"notice\":\"Set prize pool ticket.\"}},\"notice\":\"People can bet in this prize pool on which coin will get in / fall out from The Unit\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PrizePool.sol\":\"PrizePool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb4d87ee2ead4bd192b41c128f287d4b7f24b9e0cd740cc9b476881c461286007\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface,\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in _interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n        (bool success, bytes memory result) = account.staticcall{gas: 30000}(encodedParams);\\n        if (result.length < 32) return false;\\n        return success && abi.decode(result, (bool));\\n    }\\n}\\n\",\"keccak256\":\"0xf7291d7213336b00ee7edbf7cd5034778dd7b0bda2a7489e664f1e5cacc6c24e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x5c6caab697d302ad7eb59c234a4d2dbc965c1bae87709bd2850060b7695b28c7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/PrizePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./interfaces/IPrizePool.sol\\\";\\nimport \\\"./interfaces/ITicket.sol\\\";\\n\\n/**\\n  * @title  The Unit PrizePool\\n  * @author The Unit\\n  * @notice People can bet in this prize pool on which coin will get in / fall out from The Unit\\n*/\\ncontract PrizePool is IPrizePool, Ownable, AccessControl, ReentrancyGuard {\\n    using SafeCast for uint256;\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using ERC165Checker for address;\\n\\n    /// @notice Semver Version\\n    string public constant VERSION = \\\"1.0.0\\\";\\n\\n    bytes32 public constant MANAGER_ROLE = keccak256(\\\"MANAGER_ROLE\\\");\\n\\n    /// @notice Prize Pool ticket. Can only be set once by calling `setTicket()`.\\n    ITicket internal yesTicket;\\n    ITicket internal noTicket;\\n\\n    string internal betCoin;\\n\\n    /// @notice Seconds between beacon period request\\n    uint32 internal drawPeriodSeconds;\\n\\n    /// @notice Epoch timestamp when beacon period can start\\n    uint256 internal drawPeriodStartedAt;\\n\\n    /**\\n     * @dev Starts at 1. This way we know that no Draw has been recorded at 0.\\n     */\\n    uint32 internal drawId;\\n    \\n    uint8 public constant TIERS_LENGTH = 13;\\n    uint8[] internal results;\\n\\n    /* ============ Constructor ============ */\\n\\n    /// @notice Deploy the Prize Pool\\n    /// @param _manager Address of the Prize Pool manager, who will set result everyday.\\n    /// @param _drawId The id of this round.\\n    /// @param _betCoin The coin to bet in this round\\n    /// @param _beaconPeriodStart The time this round starts.\\n    /// @param _drawPeriodSeconds The duration of this round.\\n    constructor(\\n        address _manager,\\n        uint32 _drawId,\\n        string memory _betCoin,\\n        uint256 _beaconPeriodStart,\\n        uint32 _drawPeriodSeconds\\n    ) ReentrancyGuard() {\\n        drawId = _drawId;\\n        betCoin = _betCoin;\\n        drawPeriodStartedAt = _beaconPeriodStart;\\n        drawPeriodSeconds = _drawPeriodSeconds;\\n        _setupRole(MANAGER_ROLE, _manager);\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /// @inheritdoc IPrizePool\\n    function balance() external view override returns (uint256) {\\n        return _balance();\\n    }\\n\\n    /// @inheritdoc IPrizePool\\n    function getAccountedBalance(bool _bet) external view override returns (uint256) {\\n        return _ticketSupply(_bet);\\n    }\\n\\n    /// @inheritdoc IPrizePool\\n    function getTicket(bool _bet) external view override returns (ITicket) {\\n        return _bet ? yesTicket : noTicket;\\n    }\\n\\n    /// @inheritdoc IPrizePool\\n    function depositTo(bool _bet)\\n        external\\n        payable\\n        override\\n        nonReentrant\\n    {\\n        ITicket _ticket = _bet ? yesTicket : noTicket;\\n        _mint(msg.sender, msg.value, _ticket);\\n\\n        emit Deposited(msg.sender, _ticket, msg.value);\\n    }\\n\\n    /// @inheritdoc IPrizePool\\n    function setTicket(ITicket _yesTicket, ITicket _noTicket) external override onlyOwner returns (bool) {\\n        require(address(_yesTicket) != address(0), \\\"Ticket cannot be zero address\\\");\\n        require(address(_noTicket) != address(0), \\\"Ticket cannot be zero address\\\");\\n        require(address(yesTicket) == address(0), \\\"Ticket already set!\\\");\\n        require(address(noTicket) == address(0), \\\"Ticket already set!\\\");\\n\\n        yesTicket = _yesTicket;\\n        noTicket = _noTicket;\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Returns the timestamp at which the beacon period ends\\n     * @return The timestamp at which the beacon period ends\\n     */\\n    function _drawPeriodEndAt() internal view returns (uint256) {\\n        return drawPeriodStartedAt + drawPeriodSeconds;\\n    }\\n\\n    function drawPeriodEndAt() external view override returns (uint256) {\\n        return _drawPeriodEndAt();\\n    }\\n\\n    /**\\n     * @notice Returns the number of seconds remaining until the prize can be awarded.\\n     * @return The number of seconds remaining until the prize can be awarded.\\n     */\\n    function drawRemainingSeconds() external view override returns (uint256) {\\n        uint256 endAt = _drawPeriodEndAt();\\n        uint256 time = _currentTime();\\n\\n        if (endAt <= time) {\\n            return 0;\\n        }\\n\\n        return endAt - time;\\n    }\\n\\n    /// @inheritdoc IPrizePool\\n    function getDrawId() external view override returns (uint32) {\\n        return drawId;\\n    }\\n\\n    function getBetCoin() external view override returns (string memory) {\\n        return betCoin;\\n    }\\n\\n    /// @inheritdoc IPrizePool\\n    function isDrawOver() external view override returns (bool) {\\n        return _isDrawOver();\\n    }\\n\\n    /// @inheritdoc IPrizePool\\n    function claim() external override returns (uint256) {\\n        require(_isDrawOver(), \\\"This round has not ended yet!\\\");\\n        bool isEntering = _isEntering();\\n        uint256 totalBalance = _ticketSupply(isEntering);\\n        ITicket ticket = isEntering ? yesTicket : noTicket;\\n        uint256 userBalance = ticket.balanceOf(msg.sender);\\n\\n        if (userBalance > 0) {\\n            uint256 totalAssets = _balance();\\n            ticket.controllerBurn(msg.sender, userBalance);\\n            uint256 payout = totalAssets.mul(userBalance.div(totalBalance));\\n            (bool sent,) = msg.sender.call{value: payout}(\\\"Sent\\\");\\n            require(sent, \\\"failed to claim ETH\\\");\\n        }\\n        return userBalance;\\n\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n\\n    /// @notice Called to mint controlled tokens.  Ensures that token listener callbacks are fired.\\n    /// @param _to The user who is receiving the tokens\\n    /// @param _amount The amount of tokens they are receiving\\n    /// @param _controlledToken The token that is going to be minted\\n    function _mint(\\n        address _to,\\n        uint256 _amount,\\n        ITicket _controlledToken\\n    ) internal {\\n        _controlledToken.controllerMint(_to, _amount);\\n    }\\n\\n    /// @notice The current total of tickets.\\n    /// @return Ticket total supply.\\n    function _ticketSupply(bool _bet) internal view returns (uint256) {\\n        ITicket _ticket = _bet ? yesTicket : noTicket;\\n        return _ticket.totalSupply();\\n    }\\n\\n    function _ticketTotalSupply() internal view returns (uint256) {\\n        return _ticketSupply(true) + _ticketSupply(false);\\n    }\\n\\n    /// @dev Gets the current time as represented by the current block\\n    /// @return The timestamp of the current block\\n    function _currentTime() internal view virtual returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    function pushResult(uint8 _result) external override onlyRole(MANAGER_ROLE) returns (bool) {\\n        results.push(_result);\\n        emit ResultSet(drawId, _result);\\n        return true;\\n    }\\n\\n    function getResults() external view override returns (uint8[] memory) {\\n        return results;\\n    }\\n\\n    /**\\n     * @notice Returns whether the beacon period is over.\\n     * @return True if the beacon period is over, false otherwise\\n     */\\n    function _isDrawOver() internal view returns (bool) {\\n        return _drawPeriodEndAt() <= _currentTime();\\n    }\\n\\n    function _isEntering() internal view returns (bool) {\\n        uint total = 0;\\n        for (uint j=0; j<results.length; j++) {\\n            if (results[j] == 1) {\\n                total++;\\n            }\\n        }\\n        return total >= 8;\\n    }\\n\\n    function _balance() internal view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x8e655d634abe9defd9fc53cf52de5ad76529c1faefbfad514ce1965418c68573\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IPrizePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"./ITicket.sol\\\";\\n\\ninterface IPrizePool {\\n\\n    event ResultSet(uint32 indexed drawId, uint8 result);\\n\\n    /// @dev Event emitted when assets are deposited\\n    event Deposited(\\n        address indexed user,\\n        ITicket indexed token,\\n        uint256 amount\\n    );\\n\\n    event ClaimedDraw(address indexed user, uint32 indexed drawId, uint256 payout);\\n\\n    /// @notice Deposit assets into the Prize Pool in exchange for tokens\\n    /// @param bet The choice that user makes\\n    function depositTo(bool bet) external payable;\\n\\n    // @dev Returns the total underlying balance of all assets.\\n    /// @return The underlying balance of assets\\n    function balance() external view returns (uint256);\\n\\n    /**\\n     * @notice Read internal Ticket accounted balance.\\n     * @return uint256 accountBalance\\n     */\\n    function getAccountedBalance(bool bet) external view returns (uint256);\\n\\n    /**\\n     * @notice Read ticket variable\\n     */\\n    function getTicket(bool _bet) external view returns (ITicket);\\n\\n    /// @notice Set prize pool ticket.\\n    /// @param yesTicket Address of the yes ticket to set.\\n    /// @param noTicket Address of the no ticket to set.\\n    /// @return True if ticket has been successfully set.\\n    function setTicket(ITicket yesTicket, ITicket noTicket) external returns (bool);\\n\\n    function getResults() external view returns (uint8[] memory);\\n\\n    /// will be called by Defender autotask, 1 in The Unit, -1 not in\\n    function pushResult(uint8 result) external returns (bool);\\n\\n    function claim() external returns (uint256);\\n\\n    /**\\n     * @notice Returns the number of seconds remaining until the beacon period can be complete.\\n     * @return The number of seconds remaining until the beacon period can be complete.\\n     */\\n    function drawRemainingSeconds() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the timestamp at which the beacon period ends\\n     * @return The timestamp at which the beacon period ends.\\n     */\\n    function drawPeriodEndAt() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns whether the beacon period is over\\n     * @return True if the beacon period is over, false otherwise\\n     */\\n    function isDrawOver() external view returns (bool);\\n\\n    /**\\n     * @return The draw id.\\n     */\\n    function getDrawId() external view returns (uint32);\\n\\n    /**\\n     * @return The bet coin.\\n     */\\n    function getBetCoin() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x891421c78946db7a363b4d8cf2c20113dcc94095de4db03b938252297b789b41\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ITicket.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/** @title ITicket\\n  * @author The Unit\\n  * @notice ERC20 Tokens with a controller for minting & burning.\\n*/\\ninterface ITicket is IERC20 {\\n\\n    /** \\n        @notice Interface to the contract responsible for controlling mint/burn\\n    */\\n    function controller() external view returns (address);\\n\\n    /** \\n      * @notice Allows the controller to mint tokens for a user account\\n      * @dev May be overridden to provide more granular control over minting\\n      * @param user Address of the receiver of the minted tokens\\n      * @param amount Amount of tokens to mint\\n    */\\n    function controllerMint(address user, uint256 amount) external;\\n\\n    /** \\n      * @notice Allows the controller to burn tokens from a user account\\n      * @dev May be overridden to provide more granular control over burning\\n      * @param user Address of the holder account to burn tokens from\\n      * @param amount Amount of tokens to burn\\n    */\\n    function controllerBurn(address user, uint256 amount) external;\\n\\n    /** \\n      * @notice Allows an operator via the controller to burn tokens on behalf of a user account\\n      * @dev May be overridden to provide more granular control over operator-burning\\n      * @param operator Address of the operator performing the burn action via the controller contract\\n      * @param user Address of the holder account to burn tokens from\\n      * @param amount Amount of tokens to burn\\n    */\\n    function controllerBurnFrom(\\n        address operator,\\n        address user,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x9626e7eb63d368316e39f0d449f24dde907f6273f9e172a6a5db73ef3daa3286\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162003295380380620032958339818101604052810190620000379190620004a3565b620000576200004b620000fe60201b60201c565b6200010660201b60201c565b600160028190555083600860006101000a81548163ffffffff021916908363ffffffff1602179055508260059080519060200190620000989291906200033c565b508160078190555080600660006101000a81548163ffffffff021916908363ffffffff160217905550620000f37f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0886620001ca60201b60201c565b50505050506200074a565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b620001dc8282620001e060201b60201c565b5050565b620001f28282620002d160201b60201c565b620002cd57600180600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555062000272620000fe60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b60006001600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b8280546200034a9062000621565b90600052602060002090601f0160209004810192826200036e5760008555620003ba565b82601f106200038957805160ff1916838001178555620003ba565b82800160010185558215620003ba579182015b82811115620003b95782518255916020019190600101906200039c565b5b509050620003c99190620003cd565b5090565b5b80821115620003e8576000816000905550600101620003ce565b5090565b600062000403620003fd8462000567565b6200053e565b9050828152602081018484840111156200041c57600080fd5b62000429848285620005eb565b509392505050565b6000815190506200044281620006fc565b92915050565b600082601f8301126200045a57600080fd5b81516200046c848260208601620003ec565b91505092915050565b600081519050620004868162000716565b92915050565b6000815190506200049d8162000730565b92915050565b600080600080600060a08688031215620004bc57600080fd5b6000620004cc8882890162000431565b9550506020620004df888289016200048c565b945050604086015167ffffffffffffffff811115620004fd57600080fd5b6200050b8882890162000448565b93505060606200051e8882890162000475565b925050608062000531888289016200048c565b9150509295509295909350565b60006200054a6200055d565b905062000558828262000657565b919050565b6000604051905090565b600067ffffffffffffffff821115620005855762000584620006bc565b5b6200059082620006eb565b9050602081019050919050565b6000620005aa82620005b1565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b60005b838110156200060b578082015181840152602081019050620005ee565b838111156200061b576000848401525b50505050565b600060028204905060018216806200063a57607f821691505b602082108114156200065157620006506200068d565b5b50919050565b6200066282620006eb565b810181811067ffffffffffffffff82111715620006845762000683620006bc565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b62000707816200059d565b81146200071357600080fd5b50565b6200072181620005d1565b81146200072d57600080fd5b50565b6200073b81620005db565b81146200074757600080fd5b50565b612b3b806200075a6000396000f3fe6080604052600436106101815760003560e01c806389c25941116100d1578063d603f4461161008a578063f2fde38b11610064578063f2fde38b1461057b578063f6f7fa30146105a4578063f8d0ca4c146105e1578063ffa1ad741461060c57610181565b8063d603f446146104e8578063e39abd2e14610513578063ec87621c1461055057610181565b806389c25941146103d65780638da5cb5b1461040157806391d148541461042c578063a217fddf14610469578063b69ef8a814610494578063d547741f146104bf57610181565b80634717f97c1161013e57806353b86b671161011857806353b86b671461032c5780635ad3097714610369578063677241b014610394578063715018a6146103bf57610181565b80634717f97c146102ba5780634e71d92d146102e5578063508c5e241461031057610181565b806301ffc9a71461018657806310f1b237146101c3578063248a9ca3146101ee5780632f2ff15d1461022b57806336568abe14610254578063413333de1461027d575b600080fd5b34801561019257600080fd5b506101ad60048036038101906101a89190611e19565b610637565b6040516101ba9190612281565b60405180910390f35b3480156101cf57600080fd5b506101d86106b1565b6040516101e5919061242f565b60405180910390f35b3480156101fa57600080fd5b5061021560048036038101906102109190611db4565b6106cb565b604051610222919061229c565b60405180910390f35b34801561023757600080fd5b50610252600480360381019061024d9190611ddd565b6106eb565b005b34801561026057600080fd5b5061027b60048036038101906102769190611ddd565b61070c565b005b34801561028957600080fd5b506102a4600480360381019061029f9190611d8b565b61078f565b6040516102b19190612414565b60405180910390f35b3480156102c657600080fd5b506102cf6107a1565b6040516102dc919061225f565b60405180910390f35b3480156102f157600080fd5b506102fa61081f565b6040516103079190612414565b60405180910390f35b61032a60048036038101906103259190611d8b565b610ac8565b005b34801561033857600080fd5b50610353600480360381019061034e9190611e42565b610be5565b6040516103609190612281565b60405180910390f35b34801561037557600080fd5b5061037e610ef1565b60405161038b9190612414565b60405180910390f35b3480156103a057600080fd5b506103a9610f30565b6040516103b691906122d2565b60405180910390f35b3480156103cb57600080fd5b506103d4610fc2565b005b3480156103e257600080fd5b506103eb61104a565b6040516103f89190612414565b60405180910390f35b34801561040d57600080fd5b50610416611059565b604051610423919061221b565b60405180910390f35b34801561043857600080fd5b50610453600480360381019061044e9190611ddd565b611082565b6040516104609190612281565b60405180910390f35b34801561047557600080fd5b5061047e6110ed565b60405161048b919061229c565b60405180910390f35b3480156104a057600080fd5b506104a96110f4565b6040516104b69190612414565b60405180910390f35b3480156104cb57600080fd5b506104e660048036038101906104e19190611ddd565b611103565b005b3480156104f457600080fd5b506104fd611124565b60405161050a9190612281565b60405180910390f35b34801561051f57600080fd5b5061053a60048036038101906105359190611d8b565b611133565b60405161054791906122b7565b60405180910390f35b34801561055c57600080fd5b5061056561118d565b604051610572919061229c565b60405180910390f35b34801561058757600080fd5b506105a2600480360381019061059d9190611d62565b6111b1565b005b3480156105b057600080fd5b506105cb60048036038101906105c69190611ea7565b6112a9565b6040516105d89190612281565b60405180910390f35b3480156105ed57600080fd5b506105f6611374565b604051610603919061244a565b60405180910390f35b34801561061857600080fd5b50610621611379565b60405161062e91906122d2565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806106aa57506106a9826113b2565b5b9050919050565b6000600860009054906101000a900463ffffffff16905090565b600060016000838152602001908152602001600020600101549050919050565b6106f4826106cb565b6106fd8161141c565b6107078383611430565b505050565b610714611510565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610781576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610778906123f4565b60405180910390fd5b61078b8282611518565b5050565b600061079a826115fa565b9050919050565b6060600980548060200260200160405190810160405280929190818152602001828054801561081557602002820191906000526020600020906000905b82829054906101000a900460ff1660ff16815260200190600101906020826000010492830192600103820291508084116107de5790505b5050505050905090565b60006108296116d6565b610868576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085f90612374565b60405180910390fd5b60006108726116ef565b9050600061087f826115fa565b90506000826108b057600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166108d4565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff165b905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401610911919061221b565b60206040518083038186803b15801561092957600080fd5b505afa15801561093d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109619190611e7e565b90506000811115610abe576000610976611799565b90508273ffffffffffffffffffffffffffffffffffffffff166390596dd133846040518363ffffffff1660e01b81526004016109b3929190612236565b600060405180830381600087803b1580156109cd57600080fd5b505af11580156109e1573d6000803e3d6000fd5b505050506000610a0c6109fd86856117a190919063ffffffff16565b836117b790919063ffffffff16565b905060003373ffffffffffffffffffffffffffffffffffffffff1682604051610a3490612206565b60006040518083038185875af1925050503d8060008114610a71576040519150601f19603f3d011682016040523d82523d6000602084013e610a76565b606091505b5050905080610aba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab190612334565b60405180910390fd5b5050505b8094505050505090565b600280541415610b0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b04906123d4565b60405180910390fd5b60028081905550600081610b4357600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610b67565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff165b9050610b743334836117cd565b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8752a472e571a816aea92eec8dae9baf628e840f4929fbcc2d155e6233ff68a734604051610bd19190612414565b60405180910390a350600160028190555050565b6000610bef611510565b73ffffffffffffffffffffffffffffffffffffffff16610c0d611059565b73ffffffffffffffffffffffffffffffffffffffff1614610c63576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c5a906123b4565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610cd3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cca90612354565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610d43576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3a90612354565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610dd4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dcb90612394565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610e65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5c90612394565b60405180910390fd5b82600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001905092915050565b600080610efc61183f565b90506000610f0861186c565b9050808211610f1c57600092505050610f2d565b8082610f2891906125b1565b925050505b90565b606060058054610f3f90612713565b80601f0160208091040260200160405190810160405280929190818152602001828054610f6b90612713565b8015610fb85780601f10610f8d57610100808354040283529160200191610fb8565b820191906000526020600020905b815481529060010190602001808311610f9b57829003601f168201915b5050505050905090565b610fca611510565b73ffffffffffffffffffffffffffffffffffffffff16610fe8611059565b73ffffffffffffffffffffffffffffffffffffffff161461103e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611035906123b4565b60405180910390fd5b6110486000611874565b565b600061105461183f565b905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006001600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b81565b60006110fe611799565b905090565b61110c826106cb565b6111158161141c565b61111f8383611518565b505050565b600061112e6116d6565b905090565b60008161116257600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611186565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff165b9050919050565b7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0881565b6111b9611510565b73ffffffffffffffffffffffffffffffffffffffff166111d7611059565b73ffffffffffffffffffffffffffffffffffffffff161461122d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611224906123b4565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561129d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161129490612314565b60405180910390fd5b6112a681611874565b50565b60007f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b086112d58161141c565b60098390806001815401808255809150506001900390600052602060002090602091828204019190069091909190916101000a81548160ff021916908360ff160217905550600860009054906101000a900463ffffffff1663ffffffff167fda20efca129f9bae17c9366df24b86fefbebdff4a388293be79e22c5cd871f8c84604051611362919061244a565b60405180910390a26001915050919050565b600d81565b6040518060400160405280600581526020017f312e302e3000000000000000000000000000000000000000000000000000000081525081565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b61142d81611428611510565b611938565b50565b61143a8282611082565b61150c57600180600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506114b1611510565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600033905090565b6115228282611082565b156115f65760006001600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061159b611510565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b6000808261162a57600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661164e565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff165b90508073ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561169657600080fd5b505afa1580156116aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ce9190611e7e565b915050919050565b60006116e061186c565b6116e861183f565b1115905090565b6000806000905060005b60098054905081101561178d57600160098281548110611742577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090602091828204019190069054906101000a900460ff1660ff16141561177a57818061177690612745565b9250505b808061178590612745565b9150506116f9565b50600881101591505090565b600047905090565b600081836117af9190612526565b905092915050565b600081836117c59190612557565b905092915050565b8073ffffffffffffffffffffffffffffffffffffffff16635d7b075884846040518363ffffffff1660e01b8152600401611808929190612236565b600060405180830381600087803b15801561182257600080fd5b505af1158015611836573d6000803e3d6000fd5b50505050505050565b6000600660009054906101000a900463ffffffff1663ffffffff1660075461186791906124d0565b905090565b600042905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6119428282611082565b6119d1576119678173ffffffffffffffffffffffffffffffffffffffff1660146119d5565b6119758360001c60206119d5565b6040516020016119869291906121cc565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119c891906122d2565b60405180910390fd5b5050565b6060600060028360026119e89190612557565b6119f291906124d0565b67ffffffffffffffff811115611a31577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611a635781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611ac1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611b4b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002611b8b9190612557565b611b9591906124d0565b90505b6001811115611c81577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110611bfd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b828281518110611c3a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080611c7a906126e9565b9050611b98565b5060008414611cc5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cbc906122f4565b60405180910390fd5b8091505092915050565b600081359050611cde81612a64565b92915050565b600081359050611cf381612a7b565b92915050565b600081359050611d0881612a92565b92915050565b600081359050611d1d81612aa9565b92915050565b600081359050611d3281612ac0565b92915050565b600081519050611d4781612ad7565b92915050565b600081359050611d5c81612aee565b92915050565b600060208284031215611d7457600080fd5b6000611d8284828501611ccf565b91505092915050565b600060208284031215611d9d57600080fd5b6000611dab84828501611ce4565b91505092915050565b600060208284031215611dc657600080fd5b6000611dd484828501611cf9565b91505092915050565b60008060408385031215611df057600080fd5b6000611dfe85828601611cf9565b9250506020611e0f85828601611ccf565b9150509250929050565b600060208284031215611e2b57600080fd5b6000611e3984828501611d0e565b91505092915050565b60008060408385031215611e5557600080fd5b6000611e6385828601611d23565b9250506020611e7485828601611d23565b9150509250929050565b600060208284031215611e9057600080fd5b6000611e9e84828501611d38565b91505092915050565b600060208284031215611eb957600080fd5b6000611ec784828501611d4d565b91505092915050565b6000611edc83836121ae565b60208301905092915050565b611ef1816125e5565b82525050565b6000611f0282612475565b611f0c8185612498565b9350611f1783612465565b8060005b83811015611f48578151611f2f8882611ed0565b9750611f3a8361248b565b925050600181019050611f1b565b5085935050505092915050565b611f5e816125f7565b82525050565b611f6d81612603565b82525050565b611f7c81612692565b82525050565b6000611f8d82612480565b611f9781856124b4565b9350611fa78185602086016126b6565b611fb08161281b565b840191505092915050565b6000611fc682612480565b611fd081856124c5565b9350611fe08185602086016126b6565b80840191505092915050565b6000611ff96020836124b4565b91506120048261282c565b602082019050919050565b600061201c6026836124b4565b915061202782612855565b604082019050919050565b600061203f6013836124b4565b915061204a826128a4565b602082019050919050565b6000612062601d836124b4565b915061206d826128cd565b602082019050919050565b6000612085601d836124b4565b9150612090826128f6565b602082019050919050565b60006120a86013836124b4565b91506120b38261291f565b602082019050919050565b60006120cb6020836124b4565b91506120d682612948565b602082019050919050565b60006120ee6017836124c5565b91506120f982612971565b601782019050919050565b6000612111601f836124b4565b915061211c8261299a565b602082019050919050565b60006121346004836124a9565b915061213f826129c3565b600482019050919050565b60006121576011836124c5565b9150612162826129ec565b601182019050919050565b600061217a602f836124b4565b915061218582612a15565b604082019050919050565b6121998161266b565b82525050565b6121a881612675565b82525050565b6121b781612685565b82525050565b6121c681612685565b82525050565b60006121d7826120e1565b91506121e38285611fbb565b91506121ee8261214a565b91506121fa8284611fbb565b91508190509392505050565b600061221182612127565b9150819050919050565b60006020820190506122306000830184611ee8565b92915050565b600060408201905061224b6000830185611ee8565b6122586020830184612190565b9392505050565b600060208201905081810360008301526122798184611ef7565b905092915050565b60006020820190506122966000830184611f55565b92915050565b60006020820190506122b16000830184611f64565b92915050565b60006020820190506122cc6000830184611f73565b92915050565b600060208201905081810360008301526122ec8184611f82565b905092915050565b6000602082019050818103600083015261230d81611fec565b9050919050565b6000602082019050818103600083015261232d8161200f565b9050919050565b6000602082019050818103600083015261234d81612032565b9050919050565b6000602082019050818103600083015261236d81612055565b9050919050565b6000602082019050818103600083015261238d81612078565b9050919050565b600060208201905081810360008301526123ad8161209b565b9050919050565b600060208201905081810360008301526123cd816120be565b9050919050565b600060208201905081810360008301526123ed81612104565b9050919050565b6000602082019050818103600083015261240d8161216d565b9050919050565b60006020820190506124296000830184612190565b92915050565b6000602082019050612444600083018461219f565b92915050565b600060208201905061245f60008301846121bd565b92915050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60006124db8261266b565b91506124e68361266b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561251b5761251a61278e565b5b828201905092915050565b60006125318261266b565b915061253c8361266b565b92508261254c5761254b6127bd565b5b828204905092915050565b60006125628261266b565b915061256d8361266b565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156125a6576125a561278e565b5b828202905092915050565b60006125bc8261266b565b91506125c78361266b565b9250828210156125da576125d961278e565b5b828203905092915050565b60006125f08261264b565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000612644826125e5565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600060ff82169050919050565b600061269d826126a4565b9050919050565b60006126af8261264b565b9050919050565b60005b838110156126d45780820151818401526020810190506126b9565b838111156126e3576000848401525b50505050565b60006126f48261266b565b915060008214156127085761270761278e565b5b600182039050919050565b6000600282049050600182168061272b57607f821691505b6020821081141561273f5761273e6127ec565b5b50919050565b60006127508261266b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156127835761278261278e565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f6661696c656420746f20636c61696d2045544800000000000000000000000000600082015250565b7f5469636b65742063616e6e6f74206265207a65726f2061646472657373000000600082015250565b7f5468697320726f756e6420686173206e6f7420656e6465642079657421000000600082015250565b7f5469636b657420616c7265616479207365742100000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b7f53656e7400000000000000000000000000000000000000000000000000000000600082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b612a6d816125e5565b8114612a7857600080fd5b50565b612a84816125f7565b8114612a8f57600080fd5b50565b612a9b81612603565b8114612aa657600080fd5b50565b612ab28161260d565b8114612abd57600080fd5b50565b612ac981612639565b8114612ad457600080fd5b50565b612ae08161266b565b8114612aeb57600080fd5b50565b612af781612685565b8114612b0257600080fd5b5056fea2646970667358221220bdd2c14d349c8def715cfb0ecf5909231d0be18653b0d2027f107ed7a886d8df64736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106101815760003560e01c806389c25941116100d1578063d603f4461161008a578063f2fde38b11610064578063f2fde38b1461057b578063f6f7fa30146105a4578063f8d0ca4c146105e1578063ffa1ad741461060c57610181565b8063d603f446146104e8578063e39abd2e14610513578063ec87621c1461055057610181565b806389c25941146103d65780638da5cb5b1461040157806391d148541461042c578063a217fddf14610469578063b69ef8a814610494578063d547741f146104bf57610181565b80634717f97c1161013e57806353b86b671161011857806353b86b671461032c5780635ad3097714610369578063677241b014610394578063715018a6146103bf57610181565b80634717f97c146102ba5780634e71d92d146102e5578063508c5e241461031057610181565b806301ffc9a71461018657806310f1b237146101c3578063248a9ca3146101ee5780632f2ff15d1461022b57806336568abe14610254578063413333de1461027d575b600080fd5b34801561019257600080fd5b506101ad60048036038101906101a89190611e19565b610637565b6040516101ba9190612281565b60405180910390f35b3480156101cf57600080fd5b506101d86106b1565b6040516101e5919061242f565b60405180910390f35b3480156101fa57600080fd5b5061021560048036038101906102109190611db4565b6106cb565b604051610222919061229c565b60405180910390f35b34801561023757600080fd5b50610252600480360381019061024d9190611ddd565b6106eb565b005b34801561026057600080fd5b5061027b60048036038101906102769190611ddd565b61070c565b005b34801561028957600080fd5b506102a4600480360381019061029f9190611d8b565b61078f565b6040516102b19190612414565b60405180910390f35b3480156102c657600080fd5b506102cf6107a1565b6040516102dc919061225f565b60405180910390f35b3480156102f157600080fd5b506102fa61081f565b6040516103079190612414565b60405180910390f35b61032a60048036038101906103259190611d8b565b610ac8565b005b34801561033857600080fd5b50610353600480360381019061034e9190611e42565b610be5565b6040516103609190612281565b60405180910390f35b34801561037557600080fd5b5061037e610ef1565b60405161038b9190612414565b60405180910390f35b3480156103a057600080fd5b506103a9610f30565b6040516103b691906122d2565b60405180910390f35b3480156103cb57600080fd5b506103d4610fc2565b005b3480156103e257600080fd5b506103eb61104a565b6040516103f89190612414565b60405180910390f35b34801561040d57600080fd5b50610416611059565b604051610423919061221b565b60405180910390f35b34801561043857600080fd5b50610453600480360381019061044e9190611ddd565b611082565b6040516104609190612281565b60405180910390f35b34801561047557600080fd5b5061047e6110ed565b60405161048b919061229c565b60405180910390f35b3480156104a057600080fd5b506104a96110f4565b6040516104b69190612414565b60405180910390f35b3480156104cb57600080fd5b506104e660048036038101906104e19190611ddd565b611103565b005b3480156104f457600080fd5b506104fd611124565b60405161050a9190612281565b60405180910390f35b34801561051f57600080fd5b5061053a60048036038101906105359190611d8b565b611133565b60405161054791906122b7565b60405180910390f35b34801561055c57600080fd5b5061056561118d565b604051610572919061229c565b60405180910390f35b34801561058757600080fd5b506105a2600480360381019061059d9190611d62565b6111b1565b005b3480156105b057600080fd5b506105cb60048036038101906105c69190611ea7565b6112a9565b6040516105d89190612281565b60405180910390f35b3480156105ed57600080fd5b506105f6611374565b604051610603919061244a565b60405180910390f35b34801561061857600080fd5b50610621611379565b60405161062e91906122d2565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806106aa57506106a9826113b2565b5b9050919050565b6000600860009054906101000a900463ffffffff16905090565b600060016000838152602001908152602001600020600101549050919050565b6106f4826106cb565b6106fd8161141c565b6107078383611430565b505050565b610714611510565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610781576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610778906123f4565b60405180910390fd5b61078b8282611518565b5050565b600061079a826115fa565b9050919050565b6060600980548060200260200160405190810160405280929190818152602001828054801561081557602002820191906000526020600020906000905b82829054906101000a900460ff1660ff16815260200190600101906020826000010492830192600103820291508084116107de5790505b5050505050905090565b60006108296116d6565b610868576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085f90612374565b60405180910390fd5b60006108726116ef565b9050600061087f826115fa565b90506000826108b057600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166108d4565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff165b905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401610911919061221b565b60206040518083038186803b15801561092957600080fd5b505afa15801561093d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109619190611e7e565b90506000811115610abe576000610976611799565b90508273ffffffffffffffffffffffffffffffffffffffff166390596dd133846040518363ffffffff1660e01b81526004016109b3929190612236565b600060405180830381600087803b1580156109cd57600080fd5b505af11580156109e1573d6000803e3d6000fd5b505050506000610a0c6109fd86856117a190919063ffffffff16565b836117b790919063ffffffff16565b905060003373ffffffffffffffffffffffffffffffffffffffff1682604051610a3490612206565b60006040518083038185875af1925050503d8060008114610a71576040519150601f19603f3d011682016040523d82523d6000602084013e610a76565b606091505b5050905080610aba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab190612334565b60405180910390fd5b5050505b8094505050505090565b600280541415610b0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b04906123d4565b60405180910390fd5b60028081905550600081610b4357600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610b67565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff165b9050610b743334836117cd565b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8752a472e571a816aea92eec8dae9baf628e840f4929fbcc2d155e6233ff68a734604051610bd19190612414565b60405180910390a350600160028190555050565b6000610bef611510565b73ffffffffffffffffffffffffffffffffffffffff16610c0d611059565b73ffffffffffffffffffffffffffffffffffffffff1614610c63576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c5a906123b4565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610cd3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cca90612354565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610d43576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3a90612354565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610dd4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dcb90612394565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610e65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5c90612394565b60405180910390fd5b82600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001905092915050565b600080610efc61183f565b90506000610f0861186c565b9050808211610f1c57600092505050610f2d565b8082610f2891906125b1565b925050505b90565b606060058054610f3f90612713565b80601f0160208091040260200160405190810160405280929190818152602001828054610f6b90612713565b8015610fb85780601f10610f8d57610100808354040283529160200191610fb8565b820191906000526020600020905b815481529060010190602001808311610f9b57829003601f168201915b5050505050905090565b610fca611510565b73ffffffffffffffffffffffffffffffffffffffff16610fe8611059565b73ffffffffffffffffffffffffffffffffffffffff161461103e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611035906123b4565b60405180910390fd5b6110486000611874565b565b600061105461183f565b905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006001600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b81565b60006110fe611799565b905090565b61110c826106cb565b6111158161141c565b61111f8383611518565b505050565b600061112e6116d6565b905090565b60008161116257600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611186565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff165b9050919050565b7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0881565b6111b9611510565b73ffffffffffffffffffffffffffffffffffffffff166111d7611059565b73ffffffffffffffffffffffffffffffffffffffff161461122d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611224906123b4565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561129d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161129490612314565b60405180910390fd5b6112a681611874565b50565b60007f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b086112d58161141c565b60098390806001815401808255809150506001900390600052602060002090602091828204019190069091909190916101000a81548160ff021916908360ff160217905550600860009054906101000a900463ffffffff1663ffffffff167fda20efca129f9bae17c9366df24b86fefbebdff4a388293be79e22c5cd871f8c84604051611362919061244a565b60405180910390a26001915050919050565b600d81565b6040518060400160405280600581526020017f312e302e3000000000000000000000000000000000000000000000000000000081525081565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b61142d81611428611510565b611938565b50565b61143a8282611082565b61150c57600180600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506114b1611510565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600033905090565b6115228282611082565b156115f65760006001600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061159b611510565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b6000808261162a57600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661164e565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff165b90508073ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561169657600080fd5b505afa1580156116aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ce9190611e7e565b915050919050565b60006116e061186c565b6116e861183f565b1115905090565b6000806000905060005b60098054905081101561178d57600160098281548110611742577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090602091828204019190069054906101000a900460ff1660ff16141561177a57818061177690612745565b9250505b808061178590612745565b9150506116f9565b50600881101591505090565b600047905090565b600081836117af9190612526565b905092915050565b600081836117c59190612557565b905092915050565b8073ffffffffffffffffffffffffffffffffffffffff16635d7b075884846040518363ffffffff1660e01b8152600401611808929190612236565b600060405180830381600087803b15801561182257600080fd5b505af1158015611836573d6000803e3d6000fd5b50505050505050565b6000600660009054906101000a900463ffffffff1663ffffffff1660075461186791906124d0565b905090565b600042905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6119428282611082565b6119d1576119678173ffffffffffffffffffffffffffffffffffffffff1660146119d5565b6119758360001c60206119d5565b6040516020016119869291906121cc565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119c891906122d2565b60405180910390fd5b5050565b6060600060028360026119e89190612557565b6119f291906124d0565b67ffffffffffffffff811115611a31577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611a635781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611ac1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611b4b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002611b8b9190612557565b611b9591906124d0565b90505b6001811115611c81577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110611bfd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b828281518110611c3a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080611c7a906126e9565b9050611b98565b5060008414611cc5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cbc906122f4565b60405180910390fd5b8091505092915050565b600081359050611cde81612a64565b92915050565b600081359050611cf381612a7b565b92915050565b600081359050611d0881612a92565b92915050565b600081359050611d1d81612aa9565b92915050565b600081359050611d3281612ac0565b92915050565b600081519050611d4781612ad7565b92915050565b600081359050611d5c81612aee565b92915050565b600060208284031215611d7457600080fd5b6000611d8284828501611ccf565b91505092915050565b600060208284031215611d9d57600080fd5b6000611dab84828501611ce4565b91505092915050565b600060208284031215611dc657600080fd5b6000611dd484828501611cf9565b91505092915050565b60008060408385031215611df057600080fd5b6000611dfe85828601611cf9565b9250506020611e0f85828601611ccf565b9150509250929050565b600060208284031215611e2b57600080fd5b6000611e3984828501611d0e565b91505092915050565b60008060408385031215611e5557600080fd5b6000611e6385828601611d23565b9250506020611e7485828601611d23565b9150509250929050565b600060208284031215611e9057600080fd5b6000611e9e84828501611d38565b91505092915050565b600060208284031215611eb957600080fd5b6000611ec784828501611d4d565b91505092915050565b6000611edc83836121ae565b60208301905092915050565b611ef1816125e5565b82525050565b6000611f0282612475565b611f0c8185612498565b9350611f1783612465565b8060005b83811015611f48578151611f2f8882611ed0565b9750611f3a8361248b565b925050600181019050611f1b565b5085935050505092915050565b611f5e816125f7565b82525050565b611f6d81612603565b82525050565b611f7c81612692565b82525050565b6000611f8d82612480565b611f9781856124b4565b9350611fa78185602086016126b6565b611fb08161281b565b840191505092915050565b6000611fc682612480565b611fd081856124c5565b9350611fe08185602086016126b6565b80840191505092915050565b6000611ff96020836124b4565b91506120048261282c565b602082019050919050565b600061201c6026836124b4565b915061202782612855565b604082019050919050565b600061203f6013836124b4565b915061204a826128a4565b602082019050919050565b6000612062601d836124b4565b915061206d826128cd565b602082019050919050565b6000612085601d836124b4565b9150612090826128f6565b602082019050919050565b60006120a86013836124b4565b91506120b38261291f565b602082019050919050565b60006120cb6020836124b4565b91506120d682612948565b602082019050919050565b60006120ee6017836124c5565b91506120f982612971565b601782019050919050565b6000612111601f836124b4565b915061211c8261299a565b602082019050919050565b60006121346004836124a9565b915061213f826129c3565b600482019050919050565b60006121576011836124c5565b9150612162826129ec565b601182019050919050565b600061217a602f836124b4565b915061218582612a15565b604082019050919050565b6121998161266b565b82525050565b6121a881612675565b82525050565b6121b781612685565b82525050565b6121c681612685565b82525050565b60006121d7826120e1565b91506121e38285611fbb565b91506121ee8261214a565b91506121fa8284611fbb565b91508190509392505050565b600061221182612127565b9150819050919050565b60006020820190506122306000830184611ee8565b92915050565b600060408201905061224b6000830185611ee8565b6122586020830184612190565b9392505050565b600060208201905081810360008301526122798184611ef7565b905092915050565b60006020820190506122966000830184611f55565b92915050565b60006020820190506122b16000830184611f64565b92915050565b60006020820190506122cc6000830184611f73565b92915050565b600060208201905081810360008301526122ec8184611f82565b905092915050565b6000602082019050818103600083015261230d81611fec565b9050919050565b6000602082019050818103600083015261232d8161200f565b9050919050565b6000602082019050818103600083015261234d81612032565b9050919050565b6000602082019050818103600083015261236d81612055565b9050919050565b6000602082019050818103600083015261238d81612078565b9050919050565b600060208201905081810360008301526123ad8161209b565b9050919050565b600060208201905081810360008301526123cd816120be565b9050919050565b600060208201905081810360008301526123ed81612104565b9050919050565b6000602082019050818103600083015261240d8161216d565b9050919050565b60006020820190506124296000830184612190565b92915050565b6000602082019050612444600083018461219f565b92915050565b600060208201905061245f60008301846121bd565b92915050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60006124db8261266b565b91506124e68361266b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561251b5761251a61278e565b5b828201905092915050565b60006125318261266b565b915061253c8361266b565b92508261254c5761254b6127bd565b5b828204905092915050565b60006125628261266b565b915061256d8361266b565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156125a6576125a561278e565b5b828202905092915050565b60006125bc8261266b565b91506125c78361266b565b9250828210156125da576125d961278e565b5b828203905092915050565b60006125f08261264b565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000612644826125e5565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600060ff82169050919050565b600061269d826126a4565b9050919050565b60006126af8261264b565b9050919050565b60005b838110156126d45780820151818401526020810190506126b9565b838111156126e3576000848401525b50505050565b60006126f48261266b565b915060008214156127085761270761278e565b5b600182039050919050565b6000600282049050600182168061272b57607f821691505b6020821081141561273f5761273e6127ec565b5b50919050565b60006127508261266b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156127835761278261278e565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f6661696c656420746f20636c61696d2045544800000000000000000000000000600082015250565b7f5469636b65742063616e6e6f74206265207a65726f2061646472657373000000600082015250565b7f5468697320726f756e6420686173206e6f7420656e6465642079657421000000600082015250565b7f5469636b657420616c7265616479207365742100000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b7f53656e7400000000000000000000000000000000000000000000000000000000600082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b612a6d816125e5565b8114612a7857600080fd5b50565b612a84816125f7565b8114612a8f57600080fd5b50565b612a9b81612603565b8114612aa657600080fd5b50565b612ab28161260d565b8114612abd57600080fd5b50565b612ac981612639565b8114612ad457600080fd5b50565b612ae08161266b565b8114612aeb57600080fd5b50565b612af781612685565b8114612b0257600080fd5b5056fea2646970667358221220bdd2c14d349c8def715cfb0ecf5909231d0be18653b0d2027f107ed7a886d8df64736f6c63430008040033",
  "devdoc": {
    "author": "The Unit",
    "kind": "dev",
    "methods": {
      "balance()": {
        "returns": {
          "_0": "The underlying balance of assets"
        }
      },
      "constructor": {
        "params": {
          "_beaconPeriodStart": "The time this round starts.",
          "_betCoin": "The coin to bet in this round",
          "_drawId": "The id of this round.",
          "_drawPeriodSeconds": "The duration of this round.",
          "_manager": "Address of the Prize Pool manager, who will set result everyday."
        }
      },
      "depositTo(bool)": {
        "params": {
          "bet": "The choice that user makes"
        }
      },
      "drawPeriodEndAt()": {
        "returns": {
          "_0": "The timestamp at which the beacon period ends."
        }
      },
      "drawRemainingSeconds()": {
        "returns": {
          "_0": "The number of seconds remaining until the prize can be awarded."
        }
      },
      "getAccountedBalance(bool)": {
        "returns": {
          "_0": "uint256 accountBalance"
        }
      },
      "getBetCoin()": {
        "returns": {
          "_0": "The bet coin."
        }
      },
      "getDrawId()": {
        "returns": {
          "_0": "The draw id."
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isDrawOver()": {
        "returns": {
          "_0": "True if the beacon period is over, false otherwise"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "setTicket(address,address)": {
        "params": {
          "noTicket": "Address of the no ticket to set.",
          "yesTicket": "Address of the yes ticket to set."
        },
        "returns": {
          "_0": "True if ticket has been successfully set."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "drawId": {
        "details": "Starts at 1. This way we know that no Draw has been recorded at 0."
      }
    },
    "title": "The Unit PrizePool",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "VERSION()": {
        "notice": "Semver Version"
      },
      "constructor": {
        "notice": "Deploy the Prize Pool"
      },
      "depositTo(bool)": {
        "notice": "Deposit assets into the Prize Pool in exchange for tokens"
      },
      "drawPeriodEndAt()": {
        "notice": "Returns the timestamp at which the beacon period ends"
      },
      "drawRemainingSeconds()": {
        "notice": "Returns the number of seconds remaining until the prize can be awarded."
      },
      "getAccountedBalance(bool)": {
        "notice": "Read internal Ticket accounted balance."
      },
      "getTicket(bool)": {
        "notice": "Read ticket variable"
      },
      "isDrawOver()": {
        "notice": "Returns whether the beacon period is over"
      },
      "setTicket(address,address)": {
        "notice": "Set prize pool ticket."
      }
    },
    "notice": "People can bet in this prize pool on which coin will get in / fall out from The Unit",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 400,
        "contract": "contracts/PrizePool.sol:PrizePool",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 24,
        "contract": "contracts/PrizePool.sol:PrizePool",
        "label": "_roles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 508,
        "contract": "contracts/PrizePool.sol:PrizePool",
        "label": "_status",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 3802,
        "contract": "contracts/PrizePool.sol:PrizePool",
        "label": "yesTicket",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ITicket)4676"
      },
      {
        "astId": 3805,
        "contract": "contracts/PrizePool.sol:PrizePool",
        "label": "noTicket",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(ITicket)4676"
      },
      {
        "astId": 3807,
        "contract": "contracts/PrizePool.sol:PrizePool",
        "label": "betCoin",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 3810,
        "contract": "contracts/PrizePool.sol:PrizePool",
        "label": "drawPeriodSeconds",
        "offset": 0,
        "slot": "6",
        "type": "t_uint32"
      },
      {
        "astId": 3813,
        "contract": "contracts/PrizePool.sol:PrizePool",
        "label": "drawPeriodStartedAt",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 3816,
        "contract": "contracts/PrizePool.sol:PrizePool",
        "label": "drawId",
        "offset": 0,
        "slot": "8",
        "type": "t_uint32"
      },
      {
        "astId": 3822,
        "contract": "contracts/PrizePool.sol:PrizePool",
        "label": "results",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_uint8)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint8)dyn_storage": {
        "base": "t_uint8",
        "encoding": "dynamic_array",
        "label": "uint8[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ITicket)4676": {
        "encoding": "inplace",
        "label": "contract ITicket",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/PrizePool.sol:PrizePool",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/PrizePool.sol:PrizePool",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}